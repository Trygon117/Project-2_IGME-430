● What is the intended purpose of your application?
My application allows users to make an account, and upload chapters of a novel on a regular schedule so that other users can read it.

● How are you using React?
	I have a controllers jsx file that loads the correct jsx file depending on the page these files then load react html into a div on the page
○ What components do you have?
	I have a ton, but Ill try to list them all:

		- MyNovels
		- NovelCard
		- EmptyCard
		- NewNovel

		- EditChapterWindow
	
		- EditNovelWindow
		- ChapterRow
	
		- HomeWindow
		- NovelCard
		- FeaturedCard

		- LibraryWindow
		- NovelCard

		- LoginWindow
		- SignupWindow

		- ModalChapter
		- ChangePasswordModal
		- AbstractTextArea
		- TitleTextArea

		- Navbar
	
		- NotFoundWindow

		- ProfileWindow
	
		- ReadNovelWindow
		- Chapter
		- AddBanner

		- NovelWindow

● What data are you storing in MongoDB?
	Im storing an Account Model, a Chapter Model, and a Novel Model

● What went right in the development of this project?
	I Think the the end product feels prety good so long as there aren't any unforseen bugs

● What went wrong in the development of this project?
	I Kept adding features, and ran out of time to add everything I wanted to. At some point, I just had to get a working product to turn in for
	the assignment. This has resulted in the createChapter jsx page looking really messy, and having some commented out code. I was planning on
	making it so the user could change the text size, font, and alignment. I have all the tools I need to make this work in place, but no time to 
	implement it. I also wanted to make it so that the library would have shelves, and the user could choose which shelf to add the book to, but 
	I didnt have enough time, so even though most of my code supports this function, it isn't currently implemented.
● What did you learn while developing this project?
	How to hold myself to a deadline, and stop adding things..

● If you were to continue, what would you do to improve your application?
	I would make the editChapter page work better, and be 100% bug free. I would also make it so that when a chapter is loaded to be read, the adds are
	placed every 700px or so in the middle of a paragraph instead of just on the top and bottom. The library would have the shelves feature fully 
	implemented as well.

● If you went above and beyond, how did you do so?
	I think that the createChapter page is above and beyond, even though alot of the code is ugly. When the user adds styling to the text I used 
	window.selection and selection.getRange to add in spans around the text with certain classes. The spans will automatically merge with eachother
	if they are directly adjacent to another span with exactly the right class. It took me a long time to learn how to use these functions correctly,
	and then on top of that I had to figure out how to correctly add and remove spans. I think that there are still some bugs with this code, as it
	was one of the primary reasons I was not going to be able to finish this project on time.

● If you used any borrowed code or code fragments, where did you get them from?
	originally I was going to try to use borrowed code for the createChapter page, but I quickly realised that none of it actually worked for what I
	wanted to do. I am supprised that I had to basically build this from scratch.

Endpoint Documentation
You must document each data endpoint (each one listed in your router.js) with the
following information:
● The URL of the endpoint
● The supported methods of the endpoint (GET, POST, etc)
● What middleware the endpoint uses.
● Any query/body parameters that the endpoint accepts/requires.
● A brief description of what the endpoint does and returns.

URL: /getToken
Supported Methods: GET
Middleware: Requires Secure
Query Params: 
Description: gives back a csrf token
Return Type(s): JSON

URL: /login
Supported Methods: GET, POST
Middleware: Requires Secure, Requires Logout
Query Params: login credentials
Description: If POST logs the user in. If GET it renders the login page
Return Type(s): JSON

URL: /signup
Supported Methods: POST
Middleware: Requires Secure, Requires Logout
Query Params: signup credentials
Description: Signs up the user if their credentials are valid
Return Type(s): JSON

URL: /changePassword
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: original password, and new one twice
Description: changes the users password
Return Type(s):	JSON

URL: /isUsernameAvailable
Supported Methods: POST
Middleware: Requires Secure, Requires Logout
Query Params: a username
Description: lets user know if the given username already exists
Return Type(s): JSON

URL: /isLoggedIn
Supported Methods: GET
Middleware: Requires Secure
Query Params: 
Description: returns a boolean that lets the user know if they are currently logged in
Return Type(s): JSON

URL: /getLoggedInAs
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: Returns the username of the account that the user is logged in as
Return Type(s): JSON

URL: /logout
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: Logs the user out
Return Type(s): JSON


URL: /getMyLibrary
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: returns the users library
Return Type(s):JSON


URL: /getChapterNumber
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID
Description: returns what chapter the user is on for the given book
Return Type(s): JSON


URL: /setChapterNumber
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID and chapterNumber
Description: sets what chapter the user is on for a given book
Return Type(s): JSON


URL: /activatePremium
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: activates premium
Return Type(s): JSON


URL: /deactivatePremium
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: deactivates premium
Return Type(s): JSON

URL: /isPremium
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: returns weather or not the user has a premium account
Return Type(s): JSON

URL: /addNovelToLibrary
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID
Description: adds a novel to the user's library
Return Type(s): JSON

URL: /removeNovelFromLibrary
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID
Description: removes a novel from the user's library
Return Type(s): JSON






URL: /home
Supported Methods: GET
Middleware: Requires Secure
Query Params: 
Description: renders the home page
Return Type(s): 

URL: /create
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: renders the create page
Return Type(s): 

URL: /editNovel
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: renders the editNovel page
Return Type(s):

URL: /editChapter
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: renders the editChapter page
Return Type(s):

URL: /library
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: renders the library page
Return Type(s): 

URL: /profile
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params: 
Description: renders the profile page
Return Type(s): 

URL: /viewNovel
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: renders the viewNovel page
Return Type(s):

URL: /readNovel
Supported Methods: GET
Middleware: Requires Secure, Requires Login
Query Params:
Description: renders the readNovelPage
Return Type(s):




URL: /createNovel
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: Title, Cover File
Description: Creates a new novel and adds it to the novels database
Return Type(s): JSON

URL: /editNovel
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: 
Description: allows the user to edit novel info
Return Type(s): JSON

URL: /publishNovel
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: noveID
Description: publishes, or unpublishes the novel
Return Type(s): JSON

URL: /createChapter
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID
Description: creates a chapter for the given novel
Return Type(s): JSON

URL: /deleteChapter
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: 
Description: deletes a chapter by the given ID
Return Type(s): JSON

URL: /editChapter
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: ~what you are changing~
Description: updates chapter info
Return Type(s): JSON

URL: /publishChapter
Supported Methods: POST
Middleware: Requires Secure, Requires Login
Query Params: novelID, chapterID, chapterNumber, referenceChapter
Description: publishes the chapter at whatever chapter number you want
Return Type(s): JSON



URL: /searchNovelsByUser
Supported Methods: POST
Middleware: Requires Secure
Query Params: user
Description: searches all novels created by the given user, and if they are searching for themselves, it shows unpublished novels as well
Return Type(s): JSON

URL: /searchNovelByID
Supported Methods: POST
Middleware: Requires Secure
Query Params: novelID
Description: returns the novel with the given id
Return Type(s): JSON

URL: /searchChapterByID
Supported Methods: POST
Middleware: requires secure
Query Params: chapterID
Description: returns the chapter with the given id
Return Type(s):

URL: /searchChapterNumber
Supported Methods: POST
Middleware: requires secure
Query Params: chapterID
Description: returns the chapterNumber of the given chapterID
Return Type(s):

URL: /getAllNovels
Supported Methods: GET
Middleware: requires secure
Query Params:
Description: returns all of the novels that exist
Return Type(s):
